What happens when you type google.com in your browser and press Enter?

This question has been an eternal interview question for software engineers but no one can really give a hundred percent answer without leaving out one detail or the other. Engineers tend to answer the question better based on their field of specialisation and not the holistic thought process. 

I will shed more light on the question “what happens when you type google.com in your browser and press enter” hoping to give a near hundred percent answer. Ideally, answering this question covers DNS requests, TCP/IP, Firewall, HTTPS/SSL, Load-balancer, Web server, Application server and Database.

At the browser
After typing google.com in your browser and press enter, your computer sends out a small ampere of current from the keyboard to the centre logic unit and converts it to a keycode integer, in this case 13, then the search begins. The search begins locally but being triggered on a browser means it is ready to search externally, essentially through the internet. But oops! The computer does not understand words or letters but only through digits. Humans on the other hand cannot remember long digits (IP addresses), so they use words. This is where the idea of DNS comes to play.
DNS lookup
What is DNS? The full meaning is Domain Name System and what it does basically is that, it translates human readable domain names (for example, www.google.com) to machine readable IP addresses (for example, 8.8.8.8). So, when you type google.com in your browser, the computer searches for the IP address of that domain name to process your request. In DNS, the A record is used to map a domain name with its IP address. Note that a great deal of processes occur within you typing the domain name and the return of the equivalent IP address for the search results. After hitting google.com, there is a freeze which allows these processes to occur. The search for the IP address starts internally within the operating system and the browser's cache. If the IP is not found, a resolver will be called to search externally. The resolver server is usually your ISP (Internet Service Provider). All resolvers know where to find the root server, in this case .COM. The root server then finds the .COM Top-Level Domains (TLDs) server. The .COM found the authoritative name servers for the domain google.com but the journey continues. The google.com domain is resolved by many IP addresses for better load distribution and for availability especially if one of the servers fails. When a domain is purchased, the domain registrar reserves the name and communicates to the TLDs registry the authoritative name servers. The resolver will be given the list of IP addresses in no order. The resolver might then query any of the name servers. The resolver is sitting on the fence of local and external search and all the information gathered during the external search will be saved in its cache, so that they can become available locally when google.com is entered again in the future. Now the computer has an IP address for google.com.
Making HTTP request
Up next is your computer trying to connect to that IP address, asking for page contents. This opens up a socket and requests a Transmission Control Protocol (TCP) socket stream. This request is first passed to the Transport Layer of the Open Systems Interconnection (OSI) model where a TCP segment is established. The destination port is added to the request header. The TCP segment is then sent to the Network Layer, which wraps an additional IP header. The IP address of the destination server as well as that of the current machine is inserted to form a packet. The packet next arrives at the Link 
Layer. A frame header is added that includes the Media Access Control (MAC) address of the machine's Network Interface Card (NIC). Then, the packet is ready to be transmitted through an internet connection. When an internet connection is established the packet is transmitted to the destination server which creates a Transport Layer Security (TLS) handshake. The client computer sends a ping to the server. The server also replies with a ping to the client with the TLS version, selected cipher, selected compression methods and the server's public certificate signed by a Certificate Authority (CA). The certificate contains a public key that will be used by the client to encrypt the rest of the handshake until a symmetric key can be agreed upon.
SERVER SIDE
Finally, we take a look at what happens on the server side of this request. A network security system like a firewall is placed with the server and its function is that it monitors and controls incoming and outgoing network traffic based on predetermined security rules. A firewall typically establishes a barrier between a trusted internal network and untrusted external network, such as the Internet. These were designed to increase privacy on the internet when communicating sensitive data over the internet. If there are multiple users trying to access information ongoogle.com at the same time, there could still be potential issues aside from the security portion we have covered so far. The web server on the server side is what is responsible for serving the content requested by the client. Domains expecting high traffic prevent a breakdown of communication by using multiple web servers so that no one server is overloaded with requests. This works by having a load balancer which will contain the IP address that all clients will query. The load balance in turn retrieves information from one of the servers that serve clients the data. The server side usually contains a web server and an application server. The former provides the client with static contents for example the HTML pages, media etc while the latter provides the client with dynamic contents like the database.
Back to the browser
Once the server supplies the resources like the HTML, CSS, JS, images, etc. to the browser it undergoes parsing and rendering to display the results. The rendering engine starts getting the contents of the requested document from the networking layer, then interprets the CSS in the document using “CSS lexical and syntax grammar” and the CSS file is parsed and rendered. Next is the browser executes JavaScript code as a result of some timing mechanism like the Google Doodle animation. Then finally your google.com homepage is rendered to your screen nicely. All the processes occur within a split second and response time may be determined by network connection or traffic to the server. 
 
References:
https://github.com/alex/what-happens-when#the-g-key-is-pressed
https://www.howdns.works

